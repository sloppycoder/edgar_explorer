on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  pytest:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: 0.7.19
          enable-cache: true

      - name: Install Python using uv
        run: uv python install 3.12

      - name: Install dependencies
        run: |
          uv sync

      - name: Linting
        run: |
          uv run ruff check .

      - name: Type checking
        run: |
          uv run pyright

      - name: Unit tests
        id: unit_tests
        run: |
          uv run pytest -v -s

          if [[ -f "htmlcov/index.html" ]]; then
            echo "coverage_report=yes" >> $GITHUB_OUTPUT
          fi

      - name: Upload test coverage report to GitHub pages
        if: steps.unit_tests.outputs.coverage_report == 'yes'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: htmlcov
        continue-on-error: true

  buildx:
    needs: pytest
    # build images only when if pushed into main or a tag is pushed
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/rel-')
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: set image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=main-{{date 'YYYYMMDD-HHmmss' tz='Asia/Singapore'}}-{{sha}},enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.source https://github.com/{{ github.repository }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and release
        uses: docker/build-push-action@v6
        with:
          # use path context so that .dockerignore will be processed.
          context: .
          provenance: false
          platforms: "linux/amd64"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  cloud-run-deploy:
    needs: buildx
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/rel-')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"

      - name: Set up credentials
        run: |
          echo "${{ secrets.GCP_DEPLOY_SA_KEY }}" | base64 -d > $HOME/gcloud.json

      # in order to use a container registry outside GCP, google requires setting
      # up a Google Artifactory Registry remote repository. The command below will
      # only work after the setup is done.
      # https://cloud.google.com/run/docs/deploying
      - name: Deploy to Cloud Run
        run: |
          IMAGE_TAG="${{ needs.buildx.outputs.image_tag }}"
          TAG="${IMAGE_TAG##*:}"

          gcloud auth activate-service-account --key-file=$HOME/gcloud.json
          gcloud config set project "$GOOGLE_CLOUD_PROJECT"
          gcloud config set run/region "$GOOGLE_CLOUD_REGION"

          gcloud run deploy edgar-explorer \
            --image "us-central1-docker.pkg.dev/edgar-ai-dev/ghcr-io/${{ github.repository }}:$TAG" \
            --region=${GOOGLE_CLOUD_REGION} \
            --platform=managed \
            --service-account=${CLOUD_RUN_SERVICE_ACCOUNT} \
            --concurrency=80 \
            --max-instances=2 \
            --cpu=1 \
            --memory=2Gi \
            --timeout=60s \
            --allow-unauthenticated \
            --update-secrets=/secrets/app_config.env=${APP_CONFIG_SECRET}:latest"
            --set-env-vars=RESULT_TABLE=${RESULT_TABLE},DEBUG=${DEBUG}"
        env:
          GOOGLE_CLOUD_PROJECT: edgar-ai-dev
          GOOGLE_CLOUD_REGION: us-central1
          CLOUD_RUN_SERVICE_ACCOUNT: org-account-aidev@edgar-ai-dev.iam.gserviceaccount.com
          DEBUG: "0"
          RESULT_TABLE: "edgar.extraction_result"
          APP_CONFIG_SECRET: edgar-ui-config

  clean-up-old-images:
    needs: buildx
    runs-on: ubuntu-latest

    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v5
        with:
          owner: ${{ github.repository_owner }}
          package-name: ${{ github.event.repository.name }}
          package-type: container
          min-versions-to-keep: 5
          ignore-versions: latest
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
